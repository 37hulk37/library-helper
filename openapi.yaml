openapi: 3.0.3

info:
  title: library helper API
  description: RESTful API for library helper service
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /api/books/:
    post:
      tags:
        - Books Controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBookRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
    put:
      tags:
        - Books Controller
      operationId: updateBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
    get:
      tags:
        - Books Controller
      operationId: getMostPopularBook
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
        - name: until
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
  /api/books/{bookId}:
    get:
      tags:
        - Books Controller
      operationId: getBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
    delete:
      tags:
        - Books Controller
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /api/readers/:
    post:
      tags:
        - Readers Controller
      operationId: createReader
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReaderRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
    put:
      tags:
        - Readers Controller
      operationId: updateReader
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
    get:
      tags:
        - Readers Controller
      operationId: getStrongestReader
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
        - name: until
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
  /api/readers/{readerId}:
    get:
      tags:
        - Readers Controller
      operationId: getReader
      parameters:
        - name: readerId
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
    delete:
      tags:
        - Readers Controller
      operationId: deleteReader
      parameters:
        - name: readerId
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /api/events/:
    post:
      tags:
        - Events Controller
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowBookRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    put:
      tags:
        - Events Controller
      operationId: updateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandInBookRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    get:
      tags:
        - Events Controller
      operationId: getListEvents
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
        - name: until
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /api/events/{eventId}:
    get:
      tags:
        - Events Controller
      operationId: getEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInfo'
    delete:
      tags:
        - Events Controller
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        author:
          type: string
        topic:
          type: string
        description:
          type: string
    NewBookRequest:
      required:
        - name
        - author
        - description
      type: object
      properties:
        name:
          type: string
        author:
          type: string
        topic:
          type: string
        description:
          type: string
    BookInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        author:
          type: string
        topic:
          type: string

    Reader:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    NewReaderRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string

    Event:
      type: object
      properties:
        id:
          type: integer
        readerId:
          type: integer
        bookId:
          type: integer
        from:
          type: string
          format: timestamp
        until:
          type: string
          format: timestamp
        isReturned:
          type: boolean
    BorrowBookRequest:
      required:
        - userId
        - bookId
        - from
        - until
      type: object
      properties:
        readerId:
          type: integer
        bookId:
          type: integer
        until:
          description: number of days for which the book was borrowed
          type: integer
          format: int64
        isReturned:
          type: boolean
    EventInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reader:
          type: object
          example:
            $ref: '#/components/schemas/Reader'
        book:
          type: object
          example:
            $ref: '#/components/schemas/BookInfo'
        from:
          type: string
          format: timestamp
        until:
          type: string
          format: timestamp
        isReturned:
          type: boolean
    HandInBookRequest:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
    Unit:
      type: object
